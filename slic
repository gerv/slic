#!/usr/bin/python -B
# -*- coding: utf-8 -*-
###############################################################################
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
###############################################################################

"""
    slic - Speedy LIcense Checker.

    Usage:
        slic [options...] [filenames...]
        slic [options...] < filenames...

    Options:
        -h, --help          dump this help and exit
        -V, --version       dump this script's version and exit
        -v, --verbose       verbose logging output
        -d, --debug         more verbose logging output
        -p, --plain         Output data as plain text rather than JSON
        -c, --config=<file> Name of .ini file to include (relative to slic dir)
        -D, --details       Extra output: license text and copyright info
        -s, --setlist=<file or URL to CSV file>
                            Skip or set license for all file paths in list

    slic is configured by slic.ini, but you can also add additional codebase-
    specific config files using --config=foo.ini, with foo.ini in the slic
    dir. (This is a convenience because you often want to run the command from
    the source dir, but don't want to store your ini files there.)

    slic will ignore all files found in the setlist if it's a straight plain
    text list. If it's a CSV file, it'll look in the second column for a
    license determination and use that as an override. The setlist file can be
    on disk or a URL.

    Log data is written to slic.log in the current directory.
"""

_version_ = (1, 0, 0)

import logging
logging.basicConfig(filename="slic.log")
log = logging.getLogger("slic")

import os
import os.path
import sys
import re
import getopt
import pprint
import shutil
import subprocess
import json
import csv
import urllib

import config
import detector
import utils
from slic_results import SlicResults
from license_data import license_data

# Make it so I can output UTF-8 when redirecting to a file
# Stack Overflow 5530708
import codecs
sys.stdout=codecs.getwriter('utf-8')(sys.stdout)

backup_pattern = re.compile("~\d+$")
skip_files = []

def _should_skip_file(root, basename):
    log.debug("_should_skip_file(root='%s', basename='%s')", root, basename)

    path = os.path.normpath(os.path.join(root, basename))
    ext = os.path.splitext(basename)[1]

    if config.has_option("skip_exts", ext):
        log.info("Skipping '%s' (according to 'skip_exts').", path)
        return 1
    if config.has_option("skip_filenames", basename):
        log.info("Skipping '%s' (according to 'skip_filenames').", path)
        return 1
    if config.has_option("skip_files", path):
        log.info("Skipping '%s' (according to 'skip_files').", path)
        return 1
    if path in skip_files:
        log.info("Skipping '%s' (according to exclude list).", path)
        return 1
    if backup_pattern.search(path):
        log.info("Skipping '%s' (looks like backup file).", path)
        return 1
    if config.has_option("ext_to_comment", ext) \
       and not config.has_option("force_binary_check", ext):
        return 0
    if utils.is_binary(path):
        log.debug("Skipping '%s' (binary).", path)
        return 1

    return 0


def _should_skip_dir(root, basename):
    log.debug("_should_skip_dir(root='%s', basename='%s')", root, basename)

    path = os.path.normpath(os.path.join(root, basename))

    if config.has_option("skip_dirnames", basename):
        log.info("Skipping '%s' (according to skip_dirnames).", path)
        return 1
    if config.has_option("skip_dirs", path):
        log.info("Skipping '%s' (according to skip_dirs).", path)
        return 1

    return 0


# Get the license info for a single file
# "results" is an accumulating result parameter
def _get_license_info(filename, dtr, results):
    licenses = dtr.get_license_info(filename)

    for license in licenses:
        results.add_info(filename, license)

    return


###############################################################################
# Main function
###############################################################################
def main(argv):
    try:
        opts, args = getopt.getopt(argv[1:],
                                   "VvhdDpc:s:",
                                   ["version", "verbose", "help", "debug",
                                    "details", "plain", "config=",
                                    "setlist="])
    except getopt.GetoptError, ex:
        print str(ex)
        print "Try `%s --help'." % argv[0]
        log.error(str(ex))
        log.error("Try `%s --help'." % argv[0])
        return 2

    output_json = True
    details = False
    configfile = None
    setlist = None
    for opt, optarg in opts:
        if   opt in ("-h", "--help"):
            sys.stdout.write(__doc__)
            return
        elif opt in ("-V", "--version"):
            ver = '.'.join([str(part) for part in _version_])
            print "slic %s" % ver
            return
        elif opt in ("-v", "--verbose") and opt not in ("-d", "--debug"):
            log.setLevel(logging.INFO)
        elif opt in ("-d", "--debug"):
            log.setLevel(logging.DEBUG)
        elif opt in ("-p", "--plain"):
            output_json = False
        elif opt in ("-D", "--details"):
            details = True
        elif opt in ("-c", "--config"):
            configfile = optarg
        elif opt in ("-s", "--setlist"):
            setlist = optarg

    # The base config file is slic.ini in the script's directory
    scriptpath = os.path.realpath(sys.argv[0])
    slicinipath = os.path.join(os.path.dirname(scriptpath), "slic.ini")
    config.read([slicinipath])

    # But you can also have a codebase-specific .ini file in the script's
    # directory, specified using the --config/-c option.
    if configfile:
        configinipath = os.path.join(os.path.dirname(scriptpath), configfile)
        if os.path.isfile(configinipath):
            config.read([configinipath])

    results = SlicResults()

    # Skip list file has a list of files to skip (perhaps because their license
    # has been determined manually).
    #
    # A flat list will work, or CSV (with the filename in column 0).
    #
    # We ignore lines beginning with "#", so we can mark header lines.
    if setlist:
        csvfile = None
        if os.path.isfile(setlist):
            csvfile = open(setlist, 'rb')
        elif re.match(r"http(s)?://", setlist):
            csvfile = urllib.urlopen(setlist)

        csvreader = csv.reader(csvfile)
        try:
            for row in csvreader:
                if not row or len(row) == 0 or re.search("^\s*#", row[0]):
                    continue

                log.debug("Row: %r" % row)
                filename = os.path.normpath(row[0].strip())
                skip_files.append(filename)

                # If an alternate license is specified, force it
                if len(row) >= 2:
                    results.add_info(filename, { 'tag': row[1].strip() })

            log.info("Got skip list; %i entries" % len(skip_files))
            log.debug("Skip list is:\n%r" % skip_files)
        finally:
            csvfile.close()

    # Prepare the input.
    if not args:
        log.debug("no given files, trying stdin")
        paths = sys.stdin
    else:
        paths = args

    dtr = detector.Detector(license_data, {'details': details})

    for path in paths:
        path = path.strip()
        log.debug("Doing path: %s" % path)
        # chomp if 'paths' is a stream
        if len(path) and path[-1] == "\n": path = path[:-1]

        # Comments and blank lines if we use a streamed file
        if not path or re.match("^\s*#", path):
            continue

        path = os.path.normpath(path)

        if os.path.isfile(path):
            root, basename = os.path.split(path)
            if not _should_skip_file(root, basename):
                log.debug("Top-level file given")
                _get_license_info(path, dtr, results)
        else:
            root, basename = os.path.split(path)
            if _should_skip_dir(root, basename):
                continue

            for root, dirs, files in os.walk(path):
                # Avoid modify-in-place leading to off-by-one errors
                # Stack Overflow 1207406
                dirs[:] = [dir for dir in dirs \
                                            if not _should_skip_dir(root, dir)]

                for file in files:
                    if not _should_skip_file(root, file):
                        _get_license_info(os.path.join(root, file),
                                         dtr,
                                         results)

    if output_json:
        print results.to_list_string()
    else:
        # Sort by tag
        licenses = sorted(results.itervalues(), key=lambda k: k['tag'])

        for license in licenses:
            print "-" * 60
            print license['tag']

            if 'files' in license:
                license['files'].sort()
                for filename in license['files']:
                    print filename
                print

            if 'copyrights' in license:
                for copyright in license['copyrights']:
                    print copyright
                print

            if 'text' in license:
                print "\n".join(license['text'])
                print


if __name__ == "__main__":
    sys.exit(main(sys.argv))
