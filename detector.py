# -*- coding: utf-8 -*-
import re

import logging
logging.basicConfig(filename="relic.log", level=logging.DEBUG)
log = logging.getLogger("relic")

# For each license, 'match' is a regexp which identifies that license or
# license family uniquely, when matched against a large runon string of the
# entire comment. 'subs' is a set of sub-flavours of that license. Once a type
# is detected, matches are run against the 'match' member of all the subs. If
# none are detected, you have the base flavour; otherwise you have the
# sub-flavour. This can happen recursively (see 'bsd2').
#
# Once a block has been identified as containing a particular license, you
# search from the start for a line matching 'start', and from the end
# for a line matching 'end', and take all the text in between.
#
# License tags must be unique throughout the structure.
_license_parts = {
    # MPL
    'MPL11': {
        'start':  r"The contents of this file are subject to the",
        'match':  r"subject to the Mozilla Public License Version 1.1",
        'end':    r"Contributor|All Rights Reserved|Initial Developer",
        'subs': {
            'MPL11_GPL20_LGPL21': { # Mozilla
                'start':  r"The contents of this (file|package) are subject to the",
                'match':  r"Alternatively, the .*either the GNU General",
                'end':    r"terms of any one of the MPL, the GPL or the LGPL"
            },            
        }
    },
    'MPL20': {
        'start':  r"Source Code Form [Ii]s subject to the terms of the Mozilla",
        'match':  r"Mozilla Public License, v\. 2\.0",
        'end':    r"You can obtain one at http://mozilla\.org/MPL/2\.0/",
        'subs': {
            'MPL20incompatible': {
                'start':  r"Source Code Form [Ii]s subject to the terms of the Mozilla",
                'match':  r"Incompatible With Secondary Licenses",
                'end':    r"by the Mozilla Public License, v\. 2\.0"
            },            
        }
    },
    # GPL
    'GPL30': {
        'start':  r"is free software[:;] you can redistribute it|This file is part of the",
        'match':  r"GNU General Public License.*version 3[ ,]",
        'end':    r"along with this program|gnu\.org/licenses/|0211[01].*USA"
    },
    'GPL20': {
        'start':  r"is free software; you can redistribute it|This software is licensed under the terms of the GNU",
        'match':  r"GNU General Public License.*version 2[ ,.]|version 2 .*GNU General Public License",
        'end':    r"021(10|11|39).*USA|for more details|any later version|Free Software Foundation",
        'subs': {
            'GPL20withautoconfexception1': {
                'start':  r"This (program|file) is free software",
                'match':  r"configuration script generated by Autoconf",
                'end':    r"rest of that program"
            },
            'GPL20withlibtoolexception': {
                'start':  r"GNU Libtool is free software; you can",
                'match':  r"GNU Libtool",
                'end':    r"021(10|11|39).*USA|for more details|any later version"
            },
            'GPL20withtexinfoexception': {
                'start':  r"This .* file is free software",
                'match':  r"when this file is read by TeX",
                'end':    r"Texinfo was invented"
            },
        }
    },
    # XXX Also catches 2.0 at the moment
    'LGPL21': {
        'start':  r"This (library|program) is free software; you can redistribute it",
        'match':  r"GNU (Lesser|Library) General Public License.*version 2",
        'end':    r"021(10|11|39).*USA|lgpl\.html|Free Software Foundation|of the License",
        'subs': {
            'LGPL21_MPL11_GPL20': {
                'start':  r"This (library|program) is free software; you can",
                'match':  r"Alternatively, the.*Mozilla Public License",
                'end':    r"\(at your option\) any later version"
            },
            'LGPL21_MPL11': { # Cairo
                'start':  r"This (library|program) is free software; you can",
                'match':  r"should have received a copy of the MPL along with",
                'end':    r"governing rights and limitations"
            }
        }
    },
    'GPL20withbisonexception': {
        'start':  r"As a special exception, you may",
        'match':  r"of the Bison parser skeleton",
        'end':    r"of Bison"
    },
    'GPL20withautoconfexception2': {
        'start':  r"This (program|file) is free software",
        'match':  r"configuration script generated by Autoconf",
        'end':    r"rest of that program"
    },
    # Apache
    'Apache20': {
        'start':  r"Licensed under the Apache License,? Version 2\.0" + \
                  r"|Licensed to the Apache Software Foundation \(ASF\)",
        'match':  r"under the Apache License,? Version 2\.0",
        'end':    r"the License\.?|licenses/LICENSE-2\.0"
    },
    'Apache20fileref': {
        'start':  r"Use of this source code is governed by the Apache License, Version 2\.0",
        'match':  r"Use of this source code is governed by the Apache License, Version 2\.0",
        'end':    r"See the COPYING file for details"
    },
    # Permissive
    'HPND': {
        'start':  r"Permission to use, copy, modify,?(?: and(/or)?)? distribute",
        'match':  r"Permission to use, copy, modify,?(?: and(/or)?)? distribute",
        'end':    r"OF THIS SOFTWARE|express or implied warranty" + \
                  r"|written prior permission|supporting documentation" + \
                  r"|is preserved|OR MODIFICATIONS|prior written authorization"
    },
    'MIT': {
        'start':  r"Permission is hereby granted, " + \
                  r"(?:free of charge|without written agreement)" + \
                  r"|licensed under the MIT",
        'match':  r"Permission is hereby granted, " + \
                  r"(?:free of charge|without written agreement)" + \
                  r"|licensed under the MIT",
        'end':    r"SOFTWARE\.|copyright holder|OR MODIFICATIONS|MATERIALS",
        'subs': {
            'MIT_GPL20': { # jQuery
                'start': r"Dual licensed under the MIT",
                'match': r"Dual licensed under the MIT.*and GPL",
                'end':   r"jquery\.com/License|licenses\."
            },
            'MITBSDHybrid': {
                'start': r"Permission is hereby granted, free of charge",
                'match': r"Redistributions? in binary form",
                'end':   r"SOFTWARE"
            }
         }
    },
    'MITref': {
        'start':  r"This is free software.*distribute,? or modify",
        'match':  r"terms of the MIT/X [lL]icense",
        'end':    r"terms of the MIT/X [lL]icense|with this distribution",
    },
    'BSD2Clause': {
        'start':  r"Redistribution and use of this software" + \
                  r"|Redistribution and use in source and binary forms",
        'match':  r"Redistribution and use of this software" + \
                  r"|Redistribution and use in source and binary forms",
        'end':    r"SUCH DAMAGE",
        'subs': {
            'BSD3Clause': {
                'start':  r"Redistribution and use of this software" + \
                          r"|Redistribution and use in source and binary",
                'match':  r"name.*(may|must) not be used to" + \
                          r"|Neither the (author|name).*may be used to",
                'end':    r"SUCH DAMAGE",
                'subs': {
                    'BSD4Clause': {
                        'start':  r"Redistribution and use of this software" + \
                                  r"|Redistribution and use in source and",
                        'match':  r"advertising materials",
                        'end':    r"SUCH DAMAGE",
                        'subs': {
                            'BSD4ClauseUC': {
                                'start':  r"Redistribution and use of this software" + \
                                          r"|Redistribution and use in source and",
                                'match':  r"University of California",
                                'end':    r"SUCH DAMAGE"
                            }
                        }
                    }
                }
            },
            'BSD4ClauseCompact': {
                'start':  r"Redistribution and use in source and binary",
                'match':  r"in all such forms.*advertising materials",
                'end':    r"A PARTICULAR PURPOSE",
            },
            'BSD4ClauseSSLeay': {
                'start':  r"Redistribution and use in source and binary",
                'match':  r"Eric Young|Tim Hudson",
                'end':    r"SUCH DAMAGE",
            }
        }
    },
    'bsdprotection': {
        'start': r"BSD PROTECTION LICENSE",
        'match': r"BSD PROTECTION LICENSE",
        'end':   r"OF SUCH DAMAGES"
    },
    'bsdfileref': {
        'start':  r"Licensed under the New BSD license" + \
                  r"|The program is distributed under terms of BSD" + \
                  r"|Use of this source code is governed by a BSD-style",
        'match':  r"Licensed under the New BSD license" + \
                  r"|The program is distributed under terms of BSD" + \
                  r"|Use of this source code is governed by a BSD-style",
        'end':    r"licenses/(BSD-3-Clause|bsd-license.php)|LICENSE|source tree"
    },
    'bsdfilerefxiph': {
        'start': r"USE, DISTRIBUTION AND REPRODUCTION",
        'match': r"BSD-STYLE SOURCE LICENSE INCLUDED WITH",
        'end':   r"TERMS BEFORE DISTRIBUTING"
    },
    'copyingfileref': {
        'start':  r"See the file COPYING for copying permission",
        'match':  r"See the file COPYING for copying permission",
        'end':    r"See the file COPYING for copying permission"
    },
    'copyrightfileref': {
        'start':  r"See the accompanying file \"COPYRIGHT\" for",
        'match':  r"See the accompanying file \"COPYRIGHT\" for",
        'end':    r"NO WARRANTY FOR THIS SOFTWARE"
    },
    'webmfileref': {
        'start':  r"This code is licensed under the same terms as WebM",
        'match':  r"This code is licensed under the same terms as WebM",
        'end':    r"Additional IP Rights Grant|Software License Agreement"
    },
    'gnupermissive1': {
        'start':  r"Copying and distribution of this file, with or without",
        'match':  r"Copying and distribution of this file, with or without",
        'end':    r"notice are preserved"
    },
    'gnupermissive2': {
        'start':  r"This (Makefile\.in|file) is free software",
        'match':  r"This (Makefile\.in|file) is free software.*with or without modifications",
        'end':    r"PARTICULAR PURPOSE|notice is preserved" 
    },
    'genericpermissive1': {
        'start':  r"This software is provided \"as is\"; redistribution and",
        'match':  r"This software is provided \"as is\"; redistribution and",
        'end':    r"possibility of such damage" 
    },
    'genericpermissive2': {
        'start':  r"This material is provided \"as is\", with absolutely no",
        'match':  r"This material is provided \"as is\", with absolutely no",
        'end':    r"above copyright notice" 
    },
    'genericpermissive3': {
        'start':  r"You may redistribute unmodified or modified versions",
        'match':  r"I shall in no event be liable",
        'end':    r"using this software" 
    },
    'icu': {
        'start':  r"ICU License - ICU",
        'match':  r"ICU License - ICU",
        'end':    r"respective owners"
    },
    'jpnic': {
        'start':  r"The following License Terms and Conditions apply",
        'match':  r"The name of JPNIC may not be used",
        'end':    r"POSSIBILITY OF SUCH DAMAGES"
    },
    'OFL10': {
        'start':  r"This Font Software is licensed",
        'match':  r"SIL Open Font License, Version 1\.0",
        'end':    r"IN THE FONT SOFTWARE"
    },
    'OFL11': {
        'start':  r"This Font Software is licensed",
        'match':  r"SIL Open Font License, Version 1\.1",
        'end':    r"IN THE FONT SOFTWARE"
    },
    'ISC': {
        'start':  r"This program is made available under an ISC-style license",
        'match':  r"This program is made available under an ISC-style license",
        'end':    r"file LICENSE for details"
    },
    'sgib': {
        'start': r"SGI Free Software B License",
        'match': r"SGI Free Software B License",
        'end':   r"oss\.sgi\.com/projects/FreeB/"
    },
    'nvidia': {
        'start': r"NVIDIA Corporation\(\"NVIDIA\"\) supplies this software to you",
        'match': r"NVIDIA Corporation\(\"NVIDIA\"\) supplies this software to you",
        'end':   r"OF SUCH DAMAGE"
    },
    'freetype': {
        'start': r"This file is part of the FreeType project",
        'match': r"This file is part of the FreeType project",
        'end':   r"fully"
    },
    'W3C': {
        'start': r"(program|work) is distributed under the W3C('s|\(r\)) Software",
        'match': r"(program|work) is distributed under the W3C('s|\(r\)) Software",
        'end':   r"A PARTICULAR PURPOSE|for more details"
    },
    'W3Curlref': {
        'start': r"The following software licensing rules apply",
        'match': r"http://www.w3.org/Consortium/Legal/copyright-software",
        'end':   r"http://www.w3.org/Consortium/Legal/copyright-software"
    },
    'whatwg': {
        'start': r"You are granted a license to use",
        'match': r"use, reproduce and create derivative works of",
        'end':   r"this document"
    },
    'Zlib': {
        'start': r"Licensed under the zlib/libpng license",
        'match': r"Licensed under the zlib/libpng license",
        'end':   r"Licensed under the zlib/libpng license"
    },
    'zlibfileref': {
        'start': r"For conditions of distribution and use, see copyright notice",
        'match': r"distribution and use, see copyright notice in zlib.h",
        'end':   r"notice in zlib.h"
    },
    'bzip2fileref': {
        'start': r"This program is released under the terms",
        'match': r"This program is released under the terms of the license contained in the file LICENSE.",
        'end':   r"the file LICENSE"
    },
    'Python20': {
        'start': r"This module is free software, and you",
        'match': r"same terms as Python itself",
        'end':   r"OR MODIFICATIONS"
    },
    # XXX What version?
    'CDDL1X': {
        'start': r"The contents of this file are subject",
        'match': r"Common Development and Distribution License",
        'end':   r"under the License"
    },
    'Libpng': {
        'start': r"The PNG Reference Library is supplied",
        'match': r"The PNG Reference Library is supplied",
        'end':   r"appreciated"
    },
    'libpngfileref': {
        'start': r"This code is released under the libpng license",
        'match': r"This code is released under the libpng license",
        'end':   r"license in png.h"
    },
    'curl': {
        'start': r"This software is licensed as described",
        'match': r"http://curl\.haxx\.se/docs/copyright\.html",
        'end':   r"either express or implied"
    },
    'libjpeg': {
        'start': r"part of the Independent JPEG Group's software",
        'match': r"part of the Independent JPEG Group's software",
        'end':   r"accompanying README file"
    },
    'libjpegsimd': {
        'start': r"This software is provided 'as-is'",
        'match': r"use this software for any purpose, including commercial applications",
        'end':   r"any source distribution"
    },
    'eclipse': {
        'start': r"Licensed under the Eclipse Public License, Version 1\.0",
        'match': r"Licensed under the Eclipse Public License, Version 1\.0",
        'end':   r"under the License"
    },  
    # PD
    'pd': {
        'start': r"[Pp]ublic [Dd]omain",
        'match': r"[Pp]ublic [Dd]omain",
        'end':   r"[Pp]ublic [Dd]omain|conceived",
        'subs': {
            'CC0': {
                'start': r"Any copyright is dedicated to the Public Domain",
                'match': r"http://creativecommons\.org/(publicdomain/zero/1\.0/|licenses/publicdomain/)",
                'end':   r"http://creativecommons\.org/(publicdomain/zero/1\.0/|licenses/publicdomain/)"
            }
        }
    },
}

starts = {}
ends = {}

def _compile(parts):
    matches = []
    for (name, patterns) in parts.items():
        if not name:
            continue

#        print "Compiling regexps for %s" % name
        matches.append("(?P<" + name + ">" + patterns['match'] + ")")
        starts[name] = re.compile(patterns['start'])
        ends[name]   = re.compile(patterns['end'])
        if 'subs' in patterns:
            _compile(patterns['subs'])
    
    parts['_match_re'] = re.compile("|".join(matches))


_compile(_license_parts)


def id_license(comment):
    linear_comment = canonicalize_comment(comment)

    tag = _id_license_against(_license_parts, linear_comment)

    if tag:
        log.debug("Found license: %s" % tag)
        return tag
    else:
        log.debug("No license found in comment")
        return None


def _id_license_against(parts, comment):
    match = parts['_match_re'].search(comment)
    
    if match:
        hits = match.groupdict()
        tags = [hit for hit in hits if hits[hit]]
        if len(tags) > 1:
            log.warning("Found multiple licenses: %s" % "/".join(tags))
        tag = tags[0]
        log.debug("License match: %s" % tag)
        if 'subs' in parts[tag]:
            log.debug("Checking for sub-types")
            newtag = _id_license_against(parts[tag]['subs'], comment)
            if newtag:
                log.debug("Overriding license %s with %s" % (tag, newtag))
                tag = newtag
            else:
                log.debug("Sticking with base flavour")
        
        return tag

    return None


def extract_copyrights_and_license(text, tag):
    license = []
    copyrights = []
    in_copyrights = False

    start_line = -1
    end_line = -1    
    
    # Find copyrights and start
    for i in range(len(text)):
        line = text[i]
        
        if starts[tag].search(line):
            log.debug("First license line: %s" % line)
            start_line = i
            break
        
        if re.search("copyright [\d\(©]", line, re.IGNORECASE):
            log.debug("Copyright line: %s" % line)
            copyrights.append(line)
            in_copyrights = True
            continue
        
        if in_copyrights:
            if re.search("^\s*$", line): 
                log.debug("Blank line (while in copyrights)")
                # Blank line
                in_copyrights = False
            else:
                # Continuation line
                log.debug("CopyConti line: %s" % line)
                copyrights[-1] = copyrights[-1] + " " + line

    if start_line == -1:
        log.warning("Can't find start line for requested license '%s'!" % tag)
        return [], []
        
    # Find license end, starting from text end (defaulting to text end)
    end_line = len(text)
    for i in range(len(text) - 1, -1, -1):
        line = text[i]
        
        if ends[tag].search(line):
            log.debug("Last license line: %s" % line)
            end_line = i
            break
    else:
        log.warning("Can't find end line for requested license '%s'!" % tag)

    log.debug("License extends from line %i to %i" % (start_line, end_line))
    license = text[start_line:end_line + 1]

    license    = _remove_initial_rubbish(license)
    copyrights = _remove_initial_rubbish(copyrights)
    
    return copyrights, license


def _remove_initial_rubbish(comment):
    # Can't just remove all leading whitespace line-by-line as that can mess 
    # up formatting. However, we can remove any common prefix of whitespace or
    # random rubbish. For the moment, take off whatever's on the first line.
    if not comment:
        return comment
    
    match = re.search("^([\s\*#\-/]+)", comment[0])
    if match:
        rubbish = match.group(0)
        for i in range(len(comment)):
            # Last char is made optional; it can be pre-text whitespace which
            # doesn't appear on blank lines
            comment[i] = re.sub("^" + re.escape(rubbish) + "?", "", comment[i])

    return comment

    
# XXX these are currently in 2 places
def canonicalize_comment(comment):
    line = " ".join(comment)
    line = collapse_whitespace(line)
    
    return line


def collapse_whitespace(line):
    # Collapse whitespace
    line = re.sub("\s+", " ", line)

    # Strip leading and trailing whitespace
    line = re.sub("^\s", "", line)
    line = re.sub("\s$", "", line)
    
    return line
